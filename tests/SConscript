# -*- python -*-
Import("env")

LIBS = env.getlibs("boost daf_persistence utils daf_base pex_exceptions pex_logging pex_policy")
env.Program(["DbStorage_1.cc"], LIBS=LIBS)
env.Program(["FormatterRegistry_1.cc"], LIBS=LIBS)
env.Program(["Persistence_1.cc"], LIBS=LIBS)
env.Program(["Persistence_2.cc"], LIBS=LIBS)
env.Program(["Persistence_3.cc"], LIBS=LIBS)
env.Program(["DataProperty_3.cc"], LIBS=LIBS)

env.CheckSwig("python", ilang="c++")
env.Append(SWIGFLAGS=" -Ipython")

#
# Tests
#
import lsst.tests
import os
env['ENV']['SEAL_PLUGINS'] = os.environ['SEAL_PLUGINS']

tests = lsst.tests.Control(env, verbose = True)
tests.run("FormatterRegistry_*.cc")
tests.run("Persistence_3.cc")
tests.run("DataProperty_3.cc")

if os.environ.has_key('LSST_DB_AUTH') or os.path.exists("/tmp/lsst.db.auth"):
    if os.environ.has_key('LSST_DB_AUTH'):
        env['ENV']['LSST_DB_AUTH'] = os.environ['LSST_DB_AUTH']
    tests.run("DateTime_1.cc")
    tests.run("DbStorage_*.cc")
    tests.run("Persistence_1.cc")
    tests.run("Persistence_2.cc")
    tests.run("Persistence_2.py")
else:
    print "WARNING: No fallback database authenticator seen"
    print "Database tests are being skipped"

for target in [tests.run("DbStorage_1.py"), tests.run("Persistence_1.py")]:
    env.Depends(target,
                    "../python/lsst/daf/persistence/_persistenceLib%s" % (env['LDMODULESUFFIX']))
